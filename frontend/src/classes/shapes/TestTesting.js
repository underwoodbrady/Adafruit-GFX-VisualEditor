// /**
// Gotta add a bitmap converter

// **/

// //import CanvasOb from "../CanvasOb";
// //import type Cell from "../Cell";
// //type HEX = `#${string}`;

// let defaultFontBitmap = [
//     0x3E, 0x51, 0x49, 0x45, 0x3E, 
//     0x00, 0x42, 0x7F, 0x40, 0x00, 
//     0x72, 0x49, 0x49, 0x49, 0x46, 
//     0x21, 0x41, 0x49, 0x4D, 0x33,
//     0x18, 0x14, 0x12, 0x7F, 0x10, 
//     0x27, 0x45, 0x45, 0x45, 0x39, 
//     0x3C, 0x4A, 0x49, 0x49, 0x31, 
//     0x41, 0x21, 0x11, 0x09, 0x07, 
//     0x36, 0x49, 0x49, 0x49, 0x36, 
//     0x46, 0x49, 0x49, 0x29, 0x1E, 
//     0x00, 0x00, 0x14, 0x00, 0x00, 
//     0x00, 0x40, 0x34, 0x00, 0x00,
//     0x00, 0x08, 0x14, 0x22, 0x41, 
//     0x14, 0x14, 0x14, 0x14, 0x14, 
//     0x00, 0x41, 0x22, 0x14, 0x08, 
//     0x02, 0x01, 0x59, 0x09, 0x06, 
//     0x3E, 0x41, 0x5D, 0x59, 0x4E, 
//     0x7C, 0x12, 0x11, 0x12, 0x7C, 
//     0x7F, 0x49, 0x49, 0x49, 0x36, 
//     0x3E, 0x41, 0x41, 0x41, 0x22, 
//     0x7F, 0x41, 0x41, 0x41, 0x3E, 
//     0x7F, 0x49, 0x49, 0x49, 0x41, 
//     0x7F, 0x09, 0x09, 0x09, 0x01, 
//     0x3E, 0x41, 0x41, 0x51, 0x73,
//     0x7F, 0x08, 0x08, 0x08, 0x7F, 
//     0x00, 0x41, 0x7F, 0x41, 0x00, 
//     0x20, 0x40, 0x41, 0x3F, 0x01, 
//     0x7F, 0x08, 0x14, 0x22, 0x41, 
//     0x7F, 0x40, 0x40, 0x40, 0x40, 
//     0x7F, 0x02, 0x1C, 0x02, 0x7F, 
//     0x7F, 0x04, 0x08, 0x10, 0x7F, 
//     0x3E, 0x41, 0x41, 0x41, 0x3E, 
//     0x7F, 0x09, 0x09, 0x09, 0x06, 
//     0x3E, 0x41, 0x51, 0x21, 0x5E, 
//     0x7F, 0x09, 0x19, 0x29, 0x46, 
//     0x26, 0x49, 0x49, 0x49, 0x32,
//     0x03, 0x01, 0x7F, 0x01, 0x03, 
//     0x3F, 0x40, 0x40, 0x40, 0x3F, 
//     0x1F, 0x20, 0x40, 0x20, 0x1F, 
//     0x3F, 0x40, 0x38, 0x40, 0x3F, 
//     0x63, 0x14, 0x08, 0x14, 0x63, 
//     0x03, 0x04, 0x78, 0x04, 0x03, 
//     0x61, 0x59, 0x49, 0x4D, 0x43, 
//     0x00, 0x7F, 0x41, 0x41, 0x41, 
//     0x02, 0x04, 0x08, 0x10, 0x20, 
//     0x00, 0x41, 0x41, 0x41, 0x7F, 
//     0x04, 0x02, 0x01, 0x02, 0x04, 
//     0x40, 0x40, 0x40, 0x40, 0x40,
//     0x00, 0x03, 0x07, 0x08, 0x00, 
//     0x20, 0x54, 0x54, 0x78, 0x40, 
//     0x7F, 0x28, 0x44, 0x44, 0x38, 
//     0x38, 0x44, 0x44, 0x44, 0x28, 
//     0x38, 0x44, 0x44, 0x28, 0x7F, 
//     0x38, 0x54, 0x54, 0x54, 0x18, 
//     0x00, 0x08, 0x7E, 0x09, 0x02, 
//     0x18, 0xA4, 0xA4, 0x9C, 0x78, 
//     0x7F, 0x08, 0x04, 0x04, 0x78, 
//     0x00, 0x44, 0x7D, 0x40, 0x00, 
//     0x20, 0x40, 0x40, 0x3D, 0x00, 
//     0x7F, 0x10, 0x28, 0x44, 0x00,
//     0x00, 0x41, 0x7F, 0x40, 0x00, 
//     0x7C, 0x04, 0x78, 0x04, 0x78, 
//     0x7C, 0x08, 0x04, 0x04, 0x78, 
//     0x38, 0x44, 0x44, 0x44, 0x38, 
//     0xFC, 0x18, 0x24, 0x24, 0x18, 
//     0x18, 0x24, 0x24, 0x18, 0xFC, 
//     0x7C, 0x08, 0x04, 0x04, 0x08, 
//     0x48, 0x54, 0x54, 0x54, 0x24, 
//     0x04, 0x04, 0x3F, 0x44, 0x24, 
//     0x3C, 0x40, 0x40, 0x20, 0x7C, 
//     0x1C, 0x20, 0x40, 0x20, 0x1C, 
//     0x3C, 0x40, 0x30, 0x40, 0x3C,
//     0x44, 0x28, 0x10, 0x28, 0x44, 
//     0x4C, 0x90, 0x90, 0x90, 0x7C, 
//     0x44, 0x64, 0x54, 0x4C, 0x44, 
// ];

// let mapCharToIndex={
//     '0':0,
//     '1':5,
//     '2':10,
//     '3':15,
//     '4':20,
//     '5':25,
//     '6':30,
//     '7':35,
//     '8':40,
//     '9':45,
//     ':':50,
//     ';':55,
//     '<':60,
//     '=':65,
//     '>':70,
//     '?':75,
//     '@':80,
//     'A':85,
//     'B':90,
//     'C':95,
//     'D':100,
//     'E':105,
//     'F':110,
//     'G':115,
//     'H':120,
//     'I':125,
//     'J':130,
//     'K':135,
//     'L':140,
//     'M':145,
//     'N':150,
//     'O':155,
//     'P':160,
//     'Q':165,
//     'R':170,
//     'S':175,
//     'T':180,
//     'U':185,
//     'V':190,
//     'W':195,
//     'X':200,
//     'Y':205,
//     'Z':210,
//     '[':215,
//     '/':220,
//     ']':225,
//     '^':230,
//     '_':235,
//     '"':240,
//     'a':245,
//     'b':250,
//     'c':255,
//     'd':260,
//     'e':265,
//     'f':270,
//     'g':275,
//     'h':280,
//     'i':285,
//     'j':290,
//     'k':295,
//     'l':300,
//     'm':305,
//     'n':310,
//     'o':315,
//     'p':320,
//     'q':325,
//     'r':330,
//     's':335,
//     't':340,
//     'u':345,
//     'v':350,
//     'w':355,
//     'x':360,
//     'y':365,
//     'z':370
// }

// let bitLineToText = () =>{

//     let upperCaseLetters = [];

//     for (let i = 97; i <= 122; i++) {
//         upperCaseLetters.push(String.fromCharCode(i));
//     }
//     console.log(upperCaseLetters)
//     for(let i=245; i<=365;i+=5){
//         //console.log(defaultFontBitmap[i])
//         console.log(`'${upperCaseLetters[(i-245)/5]}':${i},`)
//     }
//     for(let i=0; i<defaultFontBitmap.length;i++){
//         //console.log(defaultFontBitmap[i])
//     }
//     let binArr = []

//     let length = 7;
//     let letterLength = 5;
//     let letta = Object.keys(mapCharToIndex);
//     defaultFontBitmap.forEach((value,i) => {
        
//         if(letterLength>=5){
//             binArr.push(`   ${letta[i/5]}   `)
//             letterLength = 0;
//         }
//         letterLength++;
//         let tempStr = ('0000000' + value.toString(2)).substr(-length).replaceAll("0"," ").replaceAll("1","â– ")
//         binArr.push(tempStr.split(""))
    
//     })
//     for(let i=0; i<binArr.length;i++){
//         let printstr = ""
//         for(let e = 0; e<length;  e++){
//            printstr += binArr[i][e]
//         }
//         console.log(printstr);
//     }
// }

// bitLineToText();
// /*
// class Text extends CanvasOb {
//     x: number; //X Position on display 
//     y: number; //Y Position on display 
//     text: string;

//     constructor(x: number, y: number, text: string, color: HEX) {
//         super("text", 'fill', color);
//         this.x = x;
//         this.y = y;
//         this.text = text;
//     }

//     drawCells(cellList: Cell[][]) {
//         //Bitmap converter used here
        
//     }
// }


// export default Text;*/